(window.webpackJsonp=window.webpackJsonp||[]).push([[14],{287:function(t,r,a){"use strict";a.r(r);var e=a(13),i=Object(e.a)({},(function(){var t=this,r=t._self._c;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h2",{attrs:{id:"flutter简介"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#flutter简介"}},[t._v("#")]),t._v(" Flutter简介")]),t._v(" "),r("p",[t._v("Flutter 是 Google 在 2017 年的 Google I/O 上推出的移动端 UI 开发框架，可以快速在 iOS 和 Android 上构建高质量的原生用户界面，于 2018 年发布。Flutter 与 React Native/Weex 本质上是不同的，它并没有使用 WebView、JavaScript 解释器或者系统平台自带的原生控件，而是有自己专属的一套 Widget，界面开发使用 Dart 语言，而底层渲染使用自身的高性能 C/C++ 引擎自绘。\nFlutter 是 Google推出并开源的移动应用开发框架，主打跨平台、高保真、高性能。开发者可以通过 Dart语言开发 App，一套代码同时运行在 iOS 和 Android平台。 Flutter提供了丰富的组件、接口，开发者可以很快地为 Flutter添加 native扩展。同时 Flutter还使用 Native引擎渲染视图，这无疑能为用户提供良好的体验。")]),t._v(" "),r("h3",{attrs:{id:"跨平台自绘引擎"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#跨平台自绘引擎"}},[t._v("#")]),t._v(" 跨平台自绘引擎")]),t._v(" "),r("p",[t._v("Flutter与用于构建移动应用程序的其它大多数框架不同，因为Flutter既不使用WebView，也不使用操作系统的原生控件。 相反，Flutter使用自己的高性能渲染引擎来绘制widget。这样不仅可以保证在Android和iOS上UI的一致性，而且也可以避免对原生控件依赖而带来的限制及高昂的维护成本。")]),t._v(" "),r("p",[t._v("Flutter使用Skia作为其2D渲染引擎，Skia是Google的一个2D图形处理函数库，包含字型、坐标转换，以及点阵图都有高效能且简洁的表现，Skia是跨平台的，并提供了非常友好的API，目前Google Chrome浏览器和Android均采用Skia作为其绘图引擎，值得一提的是，由于Android系统已经内置了Skia，所以Flutter在打包APK(Android应用安装包)时，不需要再将Skia打入APK中，但iOS系统并未内置Skia，所以构建iPA时，也必须将Skia一起打包，这也是为什么Flutter APP的Android安装包比iOS安装包小的主要原因。")]),t._v(" "),r("h3",{attrs:{id:"高性能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#高性能"}},[t._v("#")]),t._v(" 高性能")]),t._v(" "),r("p",[t._v("Flutter高性能主要靠两点来保证，首先，Flutter APP采用Dart语言开发。Dart在 JIT（即时编译）模式下，速度与 JavaScript基本持平。但是 Dart支持 AOT（Ahead of time）即 “提前编译”，当以 AOT模式运行时，JavaScript便远远追不上了。速度的提升对高帧率下的视图数据计算很有帮助。其次，Flutter使用自己的渲染引擎来绘制UI，布局数据等由Dart语言直接控制，所以在布局过程中不需要像RN那样要在JavaScript和Native之间通信，这在一些滑动和拖动的场景下具有明显优势，因为在滑动和拖动过程往往都会引起布局发生变化，所以JavaScript需要和Native之间不停的同步布局信息，这和在浏览器中要JavaScript频繁操作DOM所带来的问题是相同的，都会带来比较可观的性能开销。")]),t._v(" "),r("h3",{attrs:{id:"采用dart语言开发"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#采用dart语言开发"}},[t._v("#")]),t._v(" 采用Dart语言开发")]),t._v(" "),r("h4",{attrs:{id:"开发效率高"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#开发效率高"}},[t._v("#")]),t._v(" 开发效率高")]),t._v(" "),r("ul",[r("li",[t._v("基于JIT的快速开发周期：Flutter在开发阶段采用，采用JIT模式，这样就避免了每次改动都要进行编译，极大的节省了开发时间；")]),t._v(" "),r("li",[t._v("基于AOT的发布包: Flutter在发布时可以通过AOT生成高效的ARM代码以保证应用性能。而JavaScript则不具有这个能力。")])]),t._v(" "),r("h4",{attrs:{id:"高性能-2"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#高性能-2"}},[t._v("#")]),t._v(" 高性能")]),t._v(" "),r("ul",[r("li",[t._v("Flutter旨在提供流畅、高保真的的UI体验。为了实现这一点，Flutter中需要能够在每个动画帧中运行大量的代码。")]),t._v(" "),r("li",[t._v("这意味着需要一种既能提供高性能的语言，而不会出现会丢帧的周期性暂停，而Dart支持AOT，在这一点上可以做的比JavaScript更好。")])]),t._v(" "),r("h3",{attrs:{id:"flutter框架结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#flutter框架结构"}},[t._v("#")]),t._v(" Flutter框架结构")]),t._v(" "),r("p",[r("img",{attrs:{src:"/flutter.png",alt:"Alt text"}})]),t._v(" "),r("h4",{attrs:{id:"flutter-framework"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#flutter-framework"}},[t._v("#")]),t._v(" Flutter Framework")]),t._v(" "),r("p",[t._v("这是一个纯 Dart实现的 SDK，它实现了一套基础库，自底向上")]),t._v(" "),r("ul",[r("li",[t._v("底下两层（Foundation和Animation、Painting、Gestures）在Google的一些视频中被合并为一个dart UI层，对应的是Flutter中的dart:ui包，它是Flutter引擎暴露的底层UI库，提供动画、手势及绘制能力。")]),t._v(" "),r("li",[t._v("Rendering层，这一层是一个抽象的布局层，它依赖于dart UI层，Rendering层会构建一个UI树，当UI树有变化时，会计算出有变化的部分，然后更新UI树，最终将UI树绘制到屏幕上，这个过程类似于React中的虚拟DOM。Rendering层可以说是Flutter UI框架最核心的部分，它除了确定每个UI元素的位置、大小之外还要进行坐标变换、绘制(调用底层dart:ui)。")]),t._v(" "),r("li",[t._v("Widgets层是Flutter提供的的一套基础组件库，在基础组件库之上，Flutter还提供了 Material 和Cupertino两种视觉风格的组件库。而我们Flutter开发的大多数场景，只是和这两层打交道")])]),t._v(" "),r("h4",{attrs:{id:"flutter-engine"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#flutter-engine"}},[t._v("#")]),t._v(" Flutter Engine")]),t._v(" "),r("p",[t._v("这是一个纯 C++实现的 SDK，其中包括了 Skia引擎、Dart运行时、文字排版引擎等。在代码调用 dart:ui库时，调用最终会走到Engine层，然后实现真正的绘制逻辑。")])])}),[],!1,null,null,null);r.default=i.exports}}]);